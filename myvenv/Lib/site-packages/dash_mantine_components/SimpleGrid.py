# AUTO GENERATED FILE - DO NOT EDIT

from dash.development.base_component import Component, _explicitize_args


class SimpleGrid(Component):
    """A SimpleGrid component.
Responsive grid where each item takes equal amount of space. For more information, see: https://mantine.dev/core/simple-grid/

Keyword arguments:

- children (a list of or a singular dash component, string or number; optional):
    Content.

- id (string; optional):
    Unique ID to identify this component in Dash callbacks.

- breakpoints (list of dicts; optional):
    Breakpoints data to change items per row and spacing based on
    max-width.

    `breakpoints` is a list of dicts with keys:

    - cols (number; required)

    - maxWidth (number; optional)

    - minWidth (number; optional)

    - spacing (number; optional)

    - verticalSpacing (number; optional)

- className (string; optional):
    Often used with CSS to style elements with common properties.

- classNames (dict; optional):
    add class names to Mantine components.

- cols (number; optional):
    Default amount of columns, used when none of breakpoints can be
    applied.

- spacing (number; optional):
    Spacing between columns, used when none of breakpoints can be
    applied.

- style (boolean | number | string | dict | list; optional):
    Inline style.

- styles (boolean | number | string | dict | list; optional):
    Mantine styles API.

- sx (boolean | number | string | dict | list; optional):
    With sx you can add styles to component root element. If you need
    to customize styles of other elements within component use styles
    prop.

- verticalSpacing (number; optional):
    Vertical spacing between columns, used when none of breakpoints
    can be applied."""

    _children_props = []
    _base_nodes = ["children"]
    _namespace = "dash_mantine_components"
    _type = "SimpleGrid"

    @_explicitize_args
    def __init__(
        self,
        children=None,
        breakpoints=Component.UNDEFINED,
        cols=Component.UNDEFINED,
        spacing=Component.UNDEFINED,
        verticalSpacing=Component.UNDEFINED,
        className=Component.UNDEFINED,
        classNames=Component.UNDEFINED,
        style=Component.UNDEFINED,
        styles=Component.UNDEFINED,
        id=Component.UNDEFINED,
        unstyled=Component.UNDEFINED,
        sx=Component.UNDEFINED,
        m=Component.UNDEFINED,
        my=Component.UNDEFINED,
        mx=Component.UNDEFINED,
        mt=Component.UNDEFINED,
        mb=Component.UNDEFINED,
        ml=Component.UNDEFINED,
        mr=Component.UNDEFINED,
        p=Component.UNDEFINED,
        py=Component.UNDEFINED,
        px=Component.UNDEFINED,
        pt=Component.UNDEFINED,
        pb=Component.UNDEFINED,
        pl=Component.UNDEFINED,
        pr=Component.UNDEFINED,
        bg=Component.UNDEFINED,
        c=Component.UNDEFINED,
        opacity=Component.UNDEFINED,
        ff=Component.UNDEFINED,
        fz=Component.UNDEFINED,
        fw=Component.UNDEFINED,
        lts=Component.UNDEFINED,
        ta=Component.UNDEFINED,
        lh=Component.UNDEFINED,
        fs=Component.UNDEFINED,
        tt=Component.UNDEFINED,
        td=Component.UNDEFINED,
        w=Component.UNDEFINED,
        miw=Component.UNDEFINED,
        maw=Component.UNDEFINED,
        h=Component.UNDEFINED,
        mih=Component.UNDEFINED,
        mah=Component.UNDEFINED,
        bgsz=Component.UNDEFINED,
        bgp=Component.UNDEFINED,
        bgr=Component.UNDEFINED,
        pos=Component.UNDEFINED,
        top=Component.UNDEFINED,
        left=Component.UNDEFINED,
        bottom=Component.UNDEFINED,
        right=Component.UNDEFINED,
        inset=Component.UNDEFINED,
        display=Component.UNDEFINED,
        **kwargs
    ):
        self._prop_names = [
            "children",
            "id",
            "bg",
            "bgp",
            "bgr",
            "bgsz",
            "bottom",
            "breakpoints",
            "c",
            "className",
            "classNames",
            "cols",
            "display",
            "ff",
            "fs",
            "fw",
            "fz",
            "h",
            "inset",
            "left",
            "lh",
            "lts",
            "m",
            "mah",
            "maw",
            "mb",
            "mih",
            "miw",
            "ml",
            "mr",
            "mt",
            "mx",
            "my",
            "opacity",
            "p",
            "pb",
            "pl",
            "pos",
            "pr",
            "pt",
            "px",
            "py",
            "right",
            "spacing",
            "style",
            "styles",
            "sx",
            "ta",
            "td",
            "top",
            "tt",
            "unstyled",
            "verticalSpacing",
            "w",
        ]
        self._valid_wildcard_attributes = []
        self.available_properties = [
            "children",
            "id",
            "bg",
            "bgp",
            "bgr",
            "bgsz",
            "bottom",
            "breakpoints",
            "c",
            "className",
            "classNames",
            "cols",
            "display",
            "ff",
            "fs",
            "fw",
            "fz",
            "h",
            "inset",
            "left",
            "lh",
            "lts",
            "m",
            "mah",
            "maw",
            "mb",
            "mih",
            "miw",
            "ml",
            "mr",
            "mt",
            "mx",
            "my",
            "opacity",
            "p",
            "pb",
            "pl",
            "pos",
            "pr",
            "pt",
            "px",
            "py",
            "right",
            "spacing",
            "style",
            "styles",
            "sx",
            "ta",
            "td",
            "top",
            "tt",
            "unstyled",
            "verticalSpacing",
            "w",
        ]
        self.available_wildcard_properties = []
        _explicit_args = kwargs.pop("_explicit_args")
        _locals = locals()
        _locals.update(kwargs)  # For wildcard attrs and excess named props
        args = {k: _locals[k] for k in _explicit_args if k != "children"}

        super(SimpleGrid, self).__init__(children=children, **args)
